/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
struct T{
    TreeNode* parent;
    int lv;
    int rv;
    bool isLeft;
    T(TreeNode* p, int l, int r, bool left)
    {
        parent=p;
        lv=l;
        rv=r;
        isLeft=left;   
    }
};
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        
        queue<T*> q;
        int mid= (0+nums.size())/2;
        TreeNode* root= new TreeNode(nums[mid]);
        
        q.push(new T(root, 0, mid, true));
        q.push(new T(root, mid+1, nums.size(), false));
        
        while(!q.empty())
        {
            T* temp=q.front();
            q.pop();
            if(temp->lv==temp->rv)
            {
                continue;
            }
            
            int mid= (temp->lv+temp->rv)/2;
            TreeNode* child= new TreeNode(nums[mid]);
            if(temp->isLeft)
            {
                temp->parent->left= child;
            }
            else
            {
                temp->parent->right=child;
            }
            
            q.push(new T(child, temp->lv, mid, true));
            q.push(new T(child, mid+1, temp->rv, false));
        }
        
        return root;
    }
};
